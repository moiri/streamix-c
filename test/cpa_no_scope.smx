RS = stateless box RS( out speed )
DS = stateless box DS( side out dist )
B = stateless box B( in break_abs )
MB = box MB( in block, out break_cmd )
DC = box DC(
    in abs,
    in cpa,
    side in dist,
    out dc
)
CPA = box CPA(
    sync {
        decoupled side in dist,
        up in dc
    },
    out cpa,
    side in car_l_in,
    side out car_l_out,
    side in car_r_in,
    side out car_r_out
)
ABS = box ABS (
    in speed,
    in break_cmd,
    down in dc,
    out break_abs,
    out block,
    out abs
)

wrapper Car{
        down out car_next {car_l_out},
        up in car_next {car_r_in},
        down in car_prev {car_l_in},
        up out car_prev {car_r_out} }
{
    link { this, CPA }
    link { DS, DC, CPA }

    connect DS | ( RS | B | MB ).ABS.DC.CPA
}

CarS = box CarS( out car_next, in car_prev )
CarE = box CarE( in car_next, out car_prev )

connect CarS.Car.Car.Car.CarE
